// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project_Backend.data;

namespace Project_Backend.Migrations
{
    [DbContext(typeof(ProjectBackendContext))]
    [Migration("20210501122024_seeding")]
    partial class seeding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Project_Backend.Models.Department", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = new Guid("184a2287-0d4f-423a-b2b2-4cc6b62fe6fe"),
                            DepartmentName = "Weide"
                        },
                        new
                        {
                            DepartmentId = new Guid("3f6f8091-35ec-40bd-8071-01330f088de2"),
                            DepartmentName = "Penta"
                        },
                        new
                        {
                            DepartmentId = new Guid("927362f9-7f66-4a2c-ba3b-9829fd9161d1"),
                            DepartmentName = "Obeee"
                        });
                });

            modelBuilder.Entity("Project_Backend.Models.DepartmentEmployee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmployeeId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("DepartmentEmployees");

                    b.HasData(
                        new
                        {
                            EmployeeId = new Guid("4848ca04-3fef-4c35-b3e5-afd50c10f794"),
                            DepartmentId = new Guid("184a2287-0d4f-423a-b2b2-4cc6b62fe6fe")
                        },
                        new
                        {
                            EmployeeId = new Guid("4848ca04-3fef-4c35-b3e5-afd50c10f794"),
                            DepartmentId = new Guid("3f6f8091-35ec-40bd-8071-01330f088de2")
                        },
                        new
                        {
                            EmployeeId = new Guid("462c3667-9eb9-44e9-b8de-cd7c78b404ed"),
                            DepartmentId = new Guid("3f6f8091-35ec-40bd-8071-01330f088de2")
                        },
                        new
                        {
                            EmployeeId = new Guid("32e19d63-03a5-4b3b-a361-cc75f994ae5f"),
                            DepartmentId = new Guid("927362f9-7f66-4a2c-ba3b-9829fd9161d1")
                        });
                });

            modelBuilder.Entity("Project_Backend.Models.Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HireDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = new Guid("4848ca04-3fef-4c35-b3e5-afd50c10f794"),
                            Age = 18,
                            Email = "johndoe@gmail.com",
                            FirstName = "John",
                            HireDate = "20/06/2015",
                            Name = "Doe",
                            PhoneNumber = 496054388
                        },
                        new
                        {
                            EmployeeId = new Guid("462c3667-9eb9-44e9-b8de-cd7c78b404ed"),
                            Age = 18,
                            Email = "charliechoplin@gmail.com",
                            FirstName = "Charlie",
                            HireDate = "20/06/2015",
                            Name = "Choplin",
                            PhoneNumber = 496054388
                        },
                        new
                        {
                            EmployeeId = new Guid("32e19d63-03a5-4b3b-a361-cc75f994ae5f"),
                            Age = 18,
                            Email = "rickertdemeester@gmail.com",
                            FirstName = "Rickert",
                            HireDate = "20/06/2015",
                            Name = "Demeester",
                            PhoneNumber = 496054388
                        });
                });

            modelBuilder.Entity("Project_Backend.Models.EmployeeProject", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProjectId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeProjects");

                    b.HasData(
                        new
                        {
                            ProjectId = new Guid("d44a2c00-f08b-45e2-b546-659449195bd2"),
                            EmployeeId = new Guid("4848ca04-3fef-4c35-b3e5-afd50c10f794")
                        },
                        new
                        {
                            ProjectId = new Guid("cb8b6989-68d7-4484-99ca-c697fcc114ed"),
                            EmployeeId = new Guid("4848ca04-3fef-4c35-b3e5-afd50c10f794")
                        },
                        new
                        {
                            ProjectId = new Guid("cb8b6989-68d7-4484-99ca-c697fcc114ed"),
                            EmployeeId = new Guid("462c3667-9eb9-44e9-b8de-cd7c78b404ed")
                        },
                        new
                        {
                            ProjectId = new Guid("ab7c2f48-13ab-42eb-92c8-e07f55f625f5"),
                            EmployeeId = new Guid("32e19d63-03a5-4b3b-a361-cc75f994ae5f")
                        });
                });

            modelBuilder.Entity("Project_Backend.Models.Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HouseNumber")
                        .HasColumnType("int");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.HasIndex("DepartmentId")
                        .IsUnique();

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationId = new Guid("95faa0b4-d5e2-408b-9bcc-6539fc3892a1"),
                            City = "Kortrijk",
                            DepartmentId = new Guid("184a2287-0d4f-423a-b2b2-4cc6b62fe6fe"),
                            HouseNumber = 14,
                            PostalCode = 8000,
                            StreetName = "Kortrijkstraat"
                        },
                        new
                        {
                            LocationId = new Guid("35d8a64d-b363-47e5-b658-404813193058"),
                            City = "Kortrijk",
                            DepartmentId = new Guid("3f6f8091-35ec-40bd-8071-01330f088de2"),
                            HouseNumber = 18,
                            PostalCode = 8000,
                            StreetName = "Kortrijkstraat"
                        },
                        new
                        {
                            LocationId = new Guid("9c64daa8-b4c4-4f52-b748-99104ebe66cb"),
                            City = "Kortrijk",
                            DepartmentId = new Guid("927362f9-7f66-4a2c-ba3b-9829fd9161d1"),
                            HouseNumber = 20,
                            PostalCode = 8000,
                            StreetName = "Kortrijkstraat"
                        });
                });

            modelBuilder.Entity("Project_Backend.Models.Project", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProjectId = new Guid("d44a2c00-f08b-45e2-b546-659449195bd2"),
                            Description = "Make a design",
                            ProjectName = "Design"
                        },
                        new
                        {
                            ProjectId = new Guid("cb8b6989-68d7-4484-99ca-c697fcc114ed"),
                            Description = "Make a frontend",
                            ProjectName = "Frontend"
                        },
                        new
                        {
                            ProjectId = new Guid("ab7c2f48-13ab-42eb-92c8-e07f55f625f5"),
                            Description = "Make a backend",
                            ProjectName = "Backend"
                        });
                });

            modelBuilder.Entity("Project_Backend.Models.DepartmentEmployee", b =>
                {
                    b.HasOne("Project_Backend.Models.Department", "Department")
                        .WithMany("DepartmentEmployee")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_Backend.Models.Employee", null)
                        .WithMany("DepartmentEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Project_Backend.Models.EmployeeProject", b =>
                {
                    b.HasOne("Project_Backend.Models.Employee", "Employee")
                        .WithMany("EmployeeProject")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_Backend.Models.Project", "Project")
                        .WithMany("EmployeeProject")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Project_Backend.Models.Location", b =>
                {
                    b.HasOne("Project_Backend.Models.Department", "Department")
                        .WithOne("Location")
                        .HasForeignKey("Project_Backend.Models.Location", "DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Project_Backend.Models.Department", b =>
                {
                    b.Navigation("DepartmentEmployee");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Project_Backend.Models.Employee", b =>
                {
                    b.Navigation("DepartmentEmployees");

                    b.Navigation("EmployeeProject");
                });

            modelBuilder.Entity("Project_Backend.Models.Project", b =>
                {
                    b.Navigation("EmployeeProject");
                });
#pragma warning restore 612, 618
        }
    }
}
