// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project_Backend.data;

namespace Project_Backend.Migrations
{
    [DbContext(typeof(ProjectBackendContext))]
    [Migration("20210429144540_seeding")]
    partial class seeding
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Project_Backend.Models.Department", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            DepartmentId = new Guid("cdd2b38a-ef2b-4036-98b4-dbedfa8c5682"),
                            DepartmentName = "Weide"
                        },
                        new
                        {
                            DepartmentId = new Guid("c95f2ab1-770a-470c-9340-eef2c5bc755b"),
                            DepartmentName = "Penta"
                        },
                        new
                        {
                            DepartmentId = new Guid("22a030ab-3afb-4ab3-9bce-0085b1a451e0"),
                            DepartmentName = "Obeee"
                        });
                });

            modelBuilder.Entity("Project_Backend.Models.DepartmentEmployee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmployeeId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("DepartmentEmployees");

                    b.HasData(
                        new
                        {
                            EmployeeId = new Guid("2df20a1e-d5ac-4af6-8b80-78398790810a"),
                            DepartmentId = new Guid("cdd2b38a-ef2b-4036-98b4-dbedfa8c5682")
                        },
                        new
                        {
                            EmployeeId = new Guid("2df20a1e-d5ac-4af6-8b80-78398790810a"),
                            DepartmentId = new Guid("c95f2ab1-770a-470c-9340-eef2c5bc755b")
                        },
                        new
                        {
                            EmployeeId = new Guid("f4a96a61-9d10-4ed1-b49d-8ee45c3cb4e1"),
                            DepartmentId = new Guid("c95f2ab1-770a-470c-9340-eef2c5bc755b")
                        },
                        new
                        {
                            EmployeeId = new Guid("b625c565-ddfa-4ef9-b765-5238fd298cf5"),
                            DepartmentId = new Guid("22a030ab-3afb-4ab3-9bce-0085b1a451e0")
                        });
                });

            modelBuilder.Entity("Project_Backend.Models.Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HireDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employee");

                    b.HasData(
                        new
                        {
                            EmployeeId = new Guid("2df20a1e-d5ac-4af6-8b80-78398790810a"),
                            Age = 18,
                            Email = "johndoe@gmail.com",
                            FirstName = "John",
                            HireDate = "20/06/2015",
                            Name = "Doe",
                            PhoneNumber = 496054388
                        },
                        new
                        {
                            EmployeeId = new Guid("f4a96a61-9d10-4ed1-b49d-8ee45c3cb4e1"),
                            Age = 18,
                            Email = "charliechoplin@gmail.com",
                            FirstName = "Charlie",
                            HireDate = "20/06/2015",
                            Name = "Choplin",
                            PhoneNumber = 496054388
                        },
                        new
                        {
                            EmployeeId = new Guid("b625c565-ddfa-4ef9-b765-5238fd298cf5"),
                            Age = 18,
                            Email = "rickertdemeester@gmail.com",
                            FirstName = "Rickert",
                            HireDate = "20/06/2015",
                            Name = "Demeester",
                            PhoneNumber = 496054388
                        });
                });

            modelBuilder.Entity("Project_Backend.Models.EmployeeProject", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProjectId", "EmployeeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeProject");

                    b.HasData(
                        new
                        {
                            ProjectId = new Guid("6877b879-c728-474a-a699-7a13662826eb"),
                            EmployeeId = new Guid("2df20a1e-d5ac-4af6-8b80-78398790810a")
                        },
                        new
                        {
                            ProjectId = new Guid("c2afa3bc-56e7-4c5e-9799-321122b2283f"),
                            EmployeeId = new Guid("2df20a1e-d5ac-4af6-8b80-78398790810a")
                        },
                        new
                        {
                            ProjectId = new Guid("c2afa3bc-56e7-4c5e-9799-321122b2283f"),
                            EmployeeId = new Guid("f4a96a61-9d10-4ed1-b49d-8ee45c3cb4e1")
                        },
                        new
                        {
                            ProjectId = new Guid("7a5d6b35-70a9-45be-bbc7-c46353021615"),
                            EmployeeId = new Guid("b625c565-ddfa-4ef9-b765-5238fd298cf5")
                        });
                });

            modelBuilder.Entity("Project_Backend.Models.Location", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HouseNumber")
                        .HasColumnType("int");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.HasIndex("DepartmentId")
                        .IsUnique();

                    b.ToTable("Location");

                    b.HasData(
                        new
                        {
                            LocationId = new Guid("3d0d37e8-9b98-4546-8211-1ac4db9c50b4"),
                            City = "Kortrijk",
                            DepartmentId = new Guid("cdd2b38a-ef2b-4036-98b4-dbedfa8c5682"),
                            HouseNumber = 14,
                            PostalCode = 8000,
                            StreetName = "Kortrijkstraat"
                        },
                        new
                        {
                            LocationId = new Guid("884d635c-15f3-47cd-9f15-b3f74c21b74b"),
                            City = "Kortrijk",
                            DepartmentId = new Guid("c95f2ab1-770a-470c-9340-eef2c5bc755b"),
                            HouseNumber = 18,
                            PostalCode = 8000,
                            StreetName = "Kortrijkstraat"
                        },
                        new
                        {
                            LocationId = new Guid("e300650c-f7f4-4d0c-9091-258450c67ee0"),
                            City = "Kortrijk",
                            DepartmentId = new Guid("22a030ab-3afb-4ab3-9bce-0085b1a451e0"),
                            HouseNumber = 20,
                            PostalCode = 8000,
                            StreetName = "Kortrijkstraat"
                        });
                });

            modelBuilder.Entity("Project_Backend.Models.Project", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectId");

                    b.ToTable("Project");

                    b.HasData(
                        new
                        {
                            ProjectId = new Guid("6877b879-c728-474a-a699-7a13662826eb"),
                            Description = "Make a design",
                            ProjectName = "Design"
                        },
                        new
                        {
                            ProjectId = new Guid("c2afa3bc-56e7-4c5e-9799-321122b2283f"),
                            Description = "Make a frontend",
                            ProjectName = "Frontend"
                        },
                        new
                        {
                            ProjectId = new Guid("7a5d6b35-70a9-45be-bbc7-c46353021615"),
                            Description = "Make a backend",
                            ProjectName = "Backend"
                        });
                });

            modelBuilder.Entity("Project_Backend.Models.DepartmentEmployee", b =>
                {
                    b.HasOne("Project_Backend.Models.Department", "Department")
                        .WithMany("DepartmentEmployee")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_Backend.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Project_Backend.Models.EmployeeProject", b =>
                {
                    b.HasOne("Project_Backend.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_Backend.Models.Project", "Project")
                        .WithMany("EmployeeProject")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Project_Backend.Models.Location", b =>
                {
                    b.HasOne("Project_Backend.Models.Department", "Department")
                        .WithOne("Location")
                        .HasForeignKey("Project_Backend.Models.Location", "DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Project_Backend.Models.Department", b =>
                {
                    b.Navigation("DepartmentEmployee");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Project_Backend.Models.Project", b =>
                {
                    b.Navigation("EmployeeProject");
                });
#pragma warning restore 612, 618
        }
    }
}
